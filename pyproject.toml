[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[project]
name = "cratedb-toolkit"
description = "CrateDB Toolkit"
readme = "README.md"
keywords = [
  "cratedb",
  "data-processing",
  "data-retention",
  "toolkit",
]
license = { text = "AGPL 3, EUPL 1.2" }
authors = [
  { name = "Niklas Schmidtmer", email = "niklas@crate.io" },
  { name = "Marija Selakovic", email = "marija@crate.io" },
  { name = "Andreas Motl", email = "andreas.motl@crate.io" },
]
requires-python = ">=3.7"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: European Union Public Licence 1.2 (EUPL 1.2)",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Unix",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Adaptive Technologies",
  "Topic :: Communications",
  "Topic :: Database",
  "Topic :: Documentation",
  "Topic :: Education",
  "Topic :: Internet",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Office/Business",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Embedded Systems",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Object Brokering",
  "Topic :: Software Development :: Pre-processors",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Version Control",
  "Topic :: System :: Archiving",
  "Topic :: System :: Benchmark",
  "Topic :: System :: Clustering",
  "Topic :: System :: Distributed Computing",
  "Topic :: System :: Hardware",
  "Topic :: System :: Logging",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking",
  "Topic :: System :: Systems Administration",
  "Topic :: Text Processing",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "boltons<24",
  "click<9",
  "click-aliases<2,>=1.0.4",
  "colorama<1",
  "colorlog",
  "crash",
  "croud==1.8",
  'importlib-metadata; python_version <= "3.7"',
  "python-dotenv<2",
  "sqlalchemy-cratedb@ git+https://github.com/crate-workbench/sqlalchemy-cratedb.git@amo/fix-inspector",
  "sqlparse<0.5",
]
[project.optional-dependencies]
all = [
  "cratedb-toolkit[influxdb,io,mongodb]",
]
develop = [
  "black[jupyter]<24",
  "mypy==1.7.1",
  "poethepoet<0.25",
  "pyproject-fmt<1.6",
  "ruff==0.1.7",
  "validate-pyproject<0.16",
]
influxdb = [
  "influxio==0.1.1",
]
io = [
  "cr8",
  "dask>=2020,<=2023.11.0",
  "pandas<3,>=1",
]
mongodb = [
  "cr8",
  "orjson<4,>=3.3.1",
  "pymongo<5,>=3.10.1",
  "python-bsonjs<0.4",
  "rich<14,>=3.3.2",
]
release = [
  "build<2",
  "twine<5",
]
test = [
  "pueblo[dataframe]",
  "pytest<8",
  "pytest-cov<5",
  "pytest-mock<4",
  "responses<0.25",
  "testcontainers<4",
  "testcontainers-azurite==0.0.1rc1",
  "testcontainers-minio==0.0.1rc1",
  "testcontainers-mongodb==0.0.1rc1",
]
[project.urls]
changelog = "https://github.com/crate-workbench/cratedb-toolkit/blob/main/CHANGES.rst"
documentation = "https://github.com/crate-workbench/cratedb-toolkit"
homepage = "https://github.com/crate-workbench/cratedb-toolkit"
repository = "https://github.com/crate-workbench/cratedb-toolkit"
[project.scripts]
cratedb-retention = "cratedb_toolkit.retention.cli:cli"
cratedb-toolkit = "cratedb_toolkit.cli:cli"
ctk = "cratedb_toolkit.cli:cli"
migr8 = "cratedb_toolkit.io.mongodb.cli:main"

[tool.black]
line-length = 120

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]
source = ["cratedb_toolkit"]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = ["cratedb_toolkit"]
exclude = [
]
check_untyped_defs = true
ignore_missing_imports = true
implicit_optional = true
install_types = true
non_interactive = true

[tool.pytest.ini_options]
addopts = """
  -rfEXs -p pytester --strict-markers --verbosity=3
  --cov --cov-report=term-missing --cov-report=xml
  """
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "examples",
  "cratedb_toolkit",
  "tests",
]
xfail_strict = true
markers = [
  "examples",
  "influxdb",
  "mongodb",
  "slow",
]

[tool.ruff]
line-length = 120

select = [
  # Bandit
  "S",
  # Bugbear
  "B",
  # Builtins
  "A",
  # comprehensions
  "C4",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # isort
  "I",
  # pandas-vet
  "PD",
  # print
  "T20",
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # return
  "RET",
]

extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
  # Probable insecure usage of temporary file or directory
  "S108",
]

extend-exclude = [
  "amqp-to-mqtt.py",
  "workbench.py",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow use of `assert`, and `print`.
"examples/*" = ["T201"]  # Allow `print`
"cratedb_toolkit/retention/cli.py" = ["T201"]  # Allow `print`
"cratedb_toolkit/sqlalchemy/__init__.py" = ["F401"]  # Allow `moduleÂ´ imported but unused

[tool.setuptools.packages.find]
namespaces = false


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt pyproject.toml" },
]

lint = [
  { cmd = "ruff ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*" },
]

test = { cmd = "pytest" }
